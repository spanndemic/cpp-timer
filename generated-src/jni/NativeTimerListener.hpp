// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from cpptimer.djinni

#pragma once

#include "djinni_support.hpp"
#include "timer_listener.hpp"

namespace djinni_generated {

class NativeTimerListener final : ::djinni::JniInterface<::cpptimer::TimerListener, NativeTimerListener> {
public:
    using CppType = std::shared_ptr<::cpptimer::TimerListener>;
    using JniType = jobject;

    using Boxed = NativeTimerListener;

    ~NativeTimerListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeTimerListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return {jniEnv, ::djinni::JniClass<NativeTimerListener>::get()._toJava(jniEnv, c)}; }

private:
    NativeTimerListener();
    friend ::djinni::JniClass<NativeTimerListener>;
    friend ::djinni::JniInterface<::cpptimer::TimerListener, NativeTimerListener>;

    class JavaProxy final : ::djinni::JavaProxyCacheEntry, public ::cpptimer::TimerListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void TimerTicked(int32_t seconds_remaining) override;
        void TimerEnded() override;

    private:
        friend ::djinni::JniInterface<::cpptimer::TimerListener, ::djinni_generated::NativeTimerListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/mycompany/cpptimer/TimerListener") };
    const jmethodID method_timerTicked { ::djinni::jniGetMethodID(clazz.get(), "timerTicked", "(I)V") };
    const jmethodID method_timerEnded { ::djinni::jniGetMethodID(clazz.get(), "timerEnded", "()V") };
};

}  // namespace djinni_generated
