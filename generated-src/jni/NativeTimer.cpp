// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from cpptimer.djinni

#include "NativeTimer.hpp"  // my header
#include "Marshal.hpp"
#include "NativeTimer.hpp"
#include "NativeTimerListener.hpp"

namespace djinni_generated {

NativeTimer::NativeTimer() : ::djinni::JniInterface<::cpptimer::Timer, NativeTimer>("com/mycompany/cpptimer/Timer$CppProxy") {}

NativeTimer::~NativeTimer() = default;


CJNIEXPORT void JNICALL Java_com_mycompany_cpptimer_Timer_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::cpptimer::Timer>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_mycompany_cpptimer_Timer_createWithListener(JNIEnv* jniEnv, jobject /*this*/, jobject j_listener)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::cpptimer::Timer::CreateWithListener(::djinni_generated::NativeTimerListener::toCpp(jniEnv, j_listener));
        return ::djinni::release(::djinni_generated::NativeTimer::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_mycompany_cpptimer_Timer_00024CppProxy_native_1startTimer(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_seconds)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::cpptimer::Timer>(nativeRef);
        ref->StartTimer(::djinni::I32::toCpp(jniEnv, j_seconds));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
